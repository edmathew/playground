package com.ejpm.euler.problem.impl;

import com.ejpm.euler.math.FibonacciSequence;
import com.ejpm.euler.problem.Problem;
import java.math.BigInteger;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * Find the sum of all the even-valued terms in the sequence which do not exceed
 * four million.
 *
 * @author edgar.mateus
 */
public class Problem2 implements Problem {

    @Override
    public void execute() {
        System.out.println("Problem 2:\t The sum of all the even-valued terms in fibo sequence which do not exceed "
                + "four million is " + sumFibonnaciEvenTerms(4000000));
    }
    
    /**
     * Over 9000 implementation with BigDecimal. Not necessary. (The input is an int)
     * @param top
     */
    public BigInteger sumFibonnaciEvenTerms(final int top){
        final FibonacciSequence sequence = new FibonacciSequence();
        final BigInteger biTop = BigInteger.valueOf(top);
        final BigInteger two = BigInteger.valueOf(2);
        BigInteger sum = BigInteger.ZERO;
        
        BigInteger fib;
        
        for(int i = 0; ; i ++){
            fib = sequence.getElement(i);
            
            if(fib.compareTo(biTop) == 1)
                break;
            
            if(fib.remainder(two).equals(BigInteger.ZERO))
                sum = sum.add(fib);
        }

        
        return sum;
    }


}
